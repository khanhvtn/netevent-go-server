# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/schemas/*.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  filename: graph/resolver.go
  type: Resolver

# resolver:
#   layout: follow-schema
#   dir: graph
#   package: graph

# Optional: set to speed up generation time by not performing a final validation pass.
skip_validation: true

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind: []

models:
  Event:
    fields:
      tasks:
        resolver: true # force a resolver to be generated
      facilityHistories:
        resolver: true # force a resolver to be generated
      eventType:
        resolver: true # force a resolver to be generated
      owner:
        resolver: true # force a resolver to be generated
      reviewer:
        resolver: true # force a resolver to be generated
  FacilityHistory:
    fields:
      facility:
        resolver: true # force a resolver to be generated
      event:
        resolver: true # force a resolver to be generated
  Participant:
    fields:
      event:
        resolver: true # force a resolver to be generated
  Task:
    fields:
      event:
        resolver: true # force a resolver to be generated
      user:
        resolver: true # force a resolver to be generated
  ID:
    model: github.com/khanhvtn/netevent-go/graph/scalars.ID
